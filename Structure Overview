# OP Stack L2 Explorer with PepChain L1 - Monorepo Structure Overview

# 1. Project Structure
.
├── pepchain-node/           # Custom L1 node (PepChain) setup scripts
├── contracts/               # Faucet, bridge, NFT contracts
├── explorer-frontend/       # React UI for explorer and NFT views
├── explorer-backend/        # FastAPI/Express backend with API key middleware
├── faucet-service/          # L1 faucet + bridge handler scripts
├── sdk/                     # JS and Python SDKs
├── infra/                   # Docker configs for PepChain and OP Stack rollup
└── README.md

# 2. Initial Setup Commands
# Build and run PepChain (custom L1)
git clone https://github.com/ethereum/go-ethereum pepchain-node
cd pepchain-node
make geth

# Initialize PepChain with genesis
mkdir -p ~/.pepchain
./build/bin/geth --datadir ~/.pepchain init genesis.json

# Start PepChain node
./build/bin/geth \
  --datadir ~/.pepchain \
  --networkid 4242 \
  --http --http.api eth,web3,net,personal \
  --allow-insecure-unlock --nodiscover --mine --miner.threads=1

# 3. Backend API Example (FastAPI)
from fastapi import FastAPI, Request, HTTPException
import uvicorn

app = FastAPI()

@app.get("/api/contracts/{address}")
async def get_contract_info(address: str):
    # Logic to query L2 (OP Stack rollup)
    return {"address": address, "creator": "0x...", "source": "verified"}

@app.post("/api/faucet/request")
async def faucet_request(req: Request):
    # Listen for requests and bridge from PepChain
    return {"status": "Bridged to L2"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

# 4. Faucet Smart Contract (Solidity)
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract L1Faucet {
    address public bridge;

    constructor(address _bridge) {
        bridge = _bridge;
    }

    function claim() external {
        // Optional cooldown
        // Send ETH or token to L2 via OP bridge logic
    }
}

# 5. API Key Middleware (FastAPI)
from fastapi import Request

API_KEYS = {"abc123": True, "def456": True}

@app.middleware("http")
async def api_key_validator(request: Request, call_next):
    key = request.headers.get("x-api-key")
    if key not in API_KEYS:
        raise HTTPException(status_code=401, detail="Invalid API Key")
    return await call_next(request)

# 6. SDK Stub (JavaScript)
class ApeExplorerSDK {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseUrl = "https://your-explorer.com/api";
    }

    async getContract(address) {
        return fetch(`${this.baseUrl}/contracts/${address}`, {
            headers: { "x-api-key": this.apiKey },
        }).then(res => res.json());
    }

    async requestFaucet(wallet) {
        return fetch(`${this.baseUrl}/faucet/request`, {
            method: "POST",
            headers: { "x-api-key": this.apiKey, "Content-Type": "application/json" },
            body: JSON.stringify({ wallet })
        }).then(res => res.json());
    }
}

export default ApeExplorerSDK;
